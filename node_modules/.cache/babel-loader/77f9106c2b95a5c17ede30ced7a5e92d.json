{"ast":null,"code":"var _jsxFileName = \"/Users/azamatalishev/dev/Test/src/components/Projects/Project/index.js\";\nimport GithubIcon from '../../Icons/Github';\nimport YoutubeIcon from '../../Icons/Youtube';\nimport WebsiteIcon from '../../Icons/Website';\nimport Divider from '../Divider';\nimport Modal from '../Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Project = ({\n  project,\n  id,\n  reverse,\n  theme\n}) => {\n  const {\n    projectName,\n    description,\n    github,\n    demoLink,\n    img,\n    live\n  } = project;\n  const [orderReverse, projReverse] = reverse ? [\"order-reverse\", \"project-reverse\"] : [\"\", \"\"];\n  let [titleColor, textColor, iconColor] = getStyles(theme);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section section-project\",\n    id: id,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `project ${projReverse}`,\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        image: img,\n        orderReverse: orderReverse,\n        projectName: projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-description\",\n        children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: `project-title ${titleColor}`,\n          children: projectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `project-text ${textColor}`,\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"project-links-container\",\n          children: [/*#__PURE__*/_jsxDEV(GithubIcon, {\n            link: github,\n            iconColor: iconColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), live ? /*#__PURE__*/_jsxDEV(WebsiteIcon, {\n            link: live,\n            iconColor: iconColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this) : null, /*#__PURE__*/_jsxDEV(YoutubeIcon, {\n            link: demoLink,\n            iconColor: iconColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Project;\n\nconst getStyles = theme => {\n  if (theme === \"dark\") {\n    return [\"dark-title\", \"\", \"dark-icon\"];\n  } else {\n    return [\"light-title\", \"light-proj-text\", \"light-icon\"];\n  }\n};\n\nexport default Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/Users/azamatalishev/dev/Test/src/components/Projects/Project/index.js"],"names":["GithubIcon","YoutubeIcon","WebsiteIcon","Divider","Modal","Project","project","id","reverse","theme","projectName","description","github","demoLink","img","live","orderReverse","projReverse","titleColor","textColor","iconColor","getStyles"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,EAAX;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA;AAAxB,CAAD,KAAqC;AACnD,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,MAA3B;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA,GAA7C;AAAkDC,IAAAA;AAAlD,MAA2DT,OAAjE;AACA,QAAM,CAACU,YAAD,EAAeC,WAAf,IACJT,OAAO,GAAG,CAAC,eAAD,EAAkB,iBAAlB,CAAH,GAA0C,CAAC,EAAD,EAAK,EAAL,CADnD;AAEA,MAAI,CAACU,UAAD,EAAaC,SAAb,EAAwBC,SAAxB,IAAqCC,SAAS,CAACZ,KAAD,CAAlD;AAEA,sBACE;AAAS,IAAA,SAAS,EAAC,yBAAnB;AAA6C,IAAA,EAAE,EAAEF,EAAjD;AAAA,2BACE;AAAK,MAAA,SAAS,EAAG,WAAUU,WAAY,EAAvC;AAAA,8BAEE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEH,GAAd;AAAmB,QAAA,YAAY,EAAEE,YAAjC;AAA+C,QAAA,WAAW,EAAEN;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,gCAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAI,UAAA,SAAS,EAAG,iBAAgBQ,UAAW,EAA3C;AAAA,oBAA+CR;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAG,UAAA,SAAS,EAAG,gBAAeS,SAAU,EAAxC;AAAA,oBAA4CR;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAJF,eAME;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA,kCAEE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAEC,MAAlB;AAA0B,YAAA,SAAS,EAAEQ;AAArC;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGGL,IAAI,gBAAG,QAAC,WAAD;AAAa,YAAA,IAAI,EAAEA,IAAnB;AAAyB,YAAA,SAAS,EAAEK;AAApC;AAAA;AAAA;AAAA;AAAA,kBAAH,GAAuD,IAH9D,eAIE,QAAC,WAAD;AAAa,YAAA,IAAI,EAAEP,QAAnB;AAA6B,YAAA,SAAS,EAAEO;AAAxC;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA7BD;;KAAMf,O;;AA+BN,MAAMgB,SAAS,GAAIZ,KAAD,IAAW;AAE3B,MAAIA,KAAK,KAAK,MAAd,EAAsB;AACpB,WAAO,CAAC,YAAD,EAAe,EAAf,EAAmB,WAAnB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,CAAC,aAAD,EAAgB,iBAAhB,EAAmC,YAAnC,CAAP;AACD;AAEF,CARD;;AAUA,eAAeJ,OAAf","sourcesContent":["import GithubIcon from '../../Icons/Github'\nimport YoutubeIcon from '../../Icons/Youtube'\nimport WebsiteIcon from '../../Icons/Website'\nimport Divider from '../Divider'\nimport Modal from '../Modal'\n\nconst Project = ({ project, id, reverse, theme }) => {\n  const {projectName, description, github, demoLink, img, live } = project\n  const [orderReverse, projReverse] = \n    reverse ? [\"order-reverse\", \"project-reverse\"] : [\"\", \"\"]\n  let [titleColor, textColor, iconColor] = getStyles(theme)\n\n  return (\n    <section className=\"section section-project\" id={id}>\n      <div className={`project ${projReverse}`}>\n\n        <Modal image={img} orderReverse={orderReverse} projectName={projectName} />\n\n        <div className=\"project-description\">\n\n          <Divider />\n          <h1 className={`project-title ${titleColor}`}>{projectName}</h1>\n          <p className={`project-text ${textColor}`}>{description}</p>\n\n          <div className=\"project-links-container\">\n\n            <GithubIcon link={github} iconColor={iconColor} />\n            {live ? <WebsiteIcon link={live} iconColor={iconColor} /> : null}\n            <YoutubeIcon link={demoLink} iconColor={iconColor} />\n            \n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nconst getStyles = (theme) => {\n\n  if (theme === \"dark\") {\n    return [\"dark-title\", \"\", \"dark-icon\"]\n  } else {\n    return [\"light-title\", \"light-proj-text\", \"light-icon\"]\n  }\n\n}\n\nexport default Project"]},"metadata":{},"sourceType":"module"}