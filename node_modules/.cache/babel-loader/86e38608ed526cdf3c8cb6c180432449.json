{"ast":null,"code":"var _jsxFileName = \"/Users/azamatalishev/dev/Test/src/components/EmailForm/index.js\",\n    _s = $RefreshSig$();\n\nimport emailjs from 'emailjs-com';\nimport { useSelector } from 'react-redux';\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EmailForm() {\n  _s();\n\n  const [emailValue, setEmailValue] = useState(\"\");\n  const [messageValue, setMessageValue] = useState(\"\");\n  const [emailErrorState, setEmailError] = useState(null);\n  const [messageErrorState, setMessageError] = useState(null);\n  const theme = useSelector(state => state.theme);\n  const emailInput = useRef(null);\n  const emailError = useRef(null);\n  const messageInput = useRef(null);\n  const messageError = useRef(null);\n  const [headerColor, inputColor, labelColor] = getStyles(theme);\n\n  const focusEmail = () => emailInput.current.focus();\n\n  const focusMessage = () => messageInput.current.focus();\n\n  const checkValue = e => e === \"\" ? \"\" : \"with-input\";\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'email':\n        checkEmail(e.target.value);\n        setEmailValue(e.target.value);\n        break;\n\n      case 'message':\n        checkMessage(e.target.value);\n        setMessageValue(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const sendEmail = e => {\n    e.preventDefault();\n    checkEmail();\n    checkMessage();\n\n    if (emailErrorState === null || emailErrorState || messageErrorState === null || messageErrorState) {\n      return;\n    }\n\n    emailjs.sendForm('service_qyp8yfr', 'template_dlyefrm', e.target, 'user_IGuFOYMswP5iM0AcORkLj').then(result => {\n      console.log(result.text);\n    }, error => {\n      console.log(error.text);\n    });\n    e.target.reset();\n  };\n\n  const checkMessage = (message = messageValue) => {\n    if (message.trim() !== \"\") {\n      messageError.current.innerText = \"\";\n      setMessageError(false);\n    } else {\n      messageError.current.innerText = \"Please enter a message\";\n      setMessageError(true);\n    }\n  };\n\n  const checkEmail = (email = emailValue) => {\n    if (emailIsValid(email)) {\n      emailError.current.innerText = \"\";\n      setEmailError(false);\n    } else {\n      emailError.current.innerText = \"Please enter a valid email address\";\n      setEmailError(true);\n    }\n  };\n\n  const checkError = error => {\n    if (error === null) {\n      return \"\";\n    } else if (error === true) {\n      return \"has-error\";\n    } else {\n      return \"valid\";\n    }\n  };\n\n  const emailIsValid = email => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section section-email\",\n    id: \"contact\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendEmail,\n      className: \"email-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: `contact-header ${headerColor}`,\n        children: \"Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          className: `contact-input ${inputColor}`,\n          ref: emailInput,\n          onChange: handleChange,\n          value: emailValue,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `\n              contact-label \n              ${labelColor} \n              ${checkValue(emailValue)}\n              ${checkError(emailErrorState)}\n            `,\n          htmlFor: \"email\",\n          onClick: focusEmail,\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-error\",\n          ref: emailError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          className: `contact-input ${inputColor}`,\n          ref: messageInput,\n          onChange: handleChange,\n          value: messageValue,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: `\n              contact-label \n              ${labelColor} \n              ${checkValue(messageValue)}\n              ${checkError(messageErrorState)}\n            `,\n          htmlFor: \"message\",\n          onClick: focusMessage,\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-error\",\n          ref: messageError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-submit-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          className: \"contact-submit\",\n          value: \"Send Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmailForm, \"jpWqD3+mHEwKgun9V5Nkm+LoSi8=\", false, function () {\n  return [useSelector];\n});\n\n_c = EmailForm;\n\nconst getStyles = theme => {\n  if (theme === \"dark\") {\n    return [\"dark-title\", \"dark-contact-input\", \"dark-contact-label\"];\n  } else {\n    return [\"light-title\", \"light-contact-input\", \"light-contact-label\"];\n  }\n};\n\nexport default EmailForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailForm\");","map":{"version":3,"sources":["/Users/azamatalishev/dev/Test/src/components/EmailForm/index.js"],"names":["emailjs","useSelector","useRef","useState","EmailForm","emailValue","setEmailValue","messageValue","setMessageValue","emailErrorState","setEmailError","messageErrorState","setMessageError","theme","state","emailInput","emailError","messageInput","messageError","headerColor","inputColor","labelColor","getStyles","focusEmail","current","focus","focusMessage","checkValue","e","handleChange","target","name","checkEmail","value","checkMessage","sendEmail","preventDefault","sendForm","then","result","console","log","text","error","reset","message","trim","innerText","email","emailIsValid","checkError","test"],"mappings":"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","sourcesContent":["import emailjs from 'emailjs-com'\nimport { useSelector } from 'react-redux'\nimport { useRef, useState } from \"react\"\n\nfunction EmailForm() {\n  const [emailValue, setEmailValue] = useState(\"\")\n  const [messageValue, setMessageValue] = useState(\"\")\n  const [emailErrorState, setEmailError] = useState(null)\n  const [messageErrorState, setMessageError] = useState(null)\n\n  const theme = useSelector(state => state.theme)\n\n  const emailInput = useRef(null)\n  const emailError = useRef(null)\n  const messageInput = useRef(null)\n  const messageError = useRef(null)\n\n  const [headerColor, inputColor, labelColor] = getStyles(theme)\n\n  const focusEmail = () => emailInput.current.focus()\n  const focusMessage = () => messageInput.current.focus()\n  const checkValue = e => e === \"\" ? \"\" : \"with-input\" \n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'email':\n        checkEmail(e.target.value)\n        setEmailValue(e.target.value)\n        break\n      \n      case 'message':\n        checkMessage(e.target.value)\n        setMessageValue(e.target.value)\n        break\n\n      default:\n        break\n    }\n  }\n\n  const sendEmail = (e) => {\n    e.preventDefault()\n    \n    checkEmail()\n    checkMessage()\n\n    if (emailErrorState === null || emailErrorState || \n        messageErrorState === null || messageErrorState) {\n      return\n    }\n    \n    emailjs.sendForm('service_qyp8yfr', 'template_dlyefrm', e.target, \n    'user_IGuFOYMswP5iM0AcORkLj')\n      .then((result) => {\n          console.log(result.text)\n      }, (error) => {\n          console.log(error.text)\n      })\n\n    e.target.reset()\n  }\n\n  const checkMessage = (message = messageValue) => {\n    if (message.trim() !== \"\") {\n      messageError.current.innerText = \"\"\n      setMessageError(false)\n    } else {\n      messageError.current.innerText = \"Please enter a message\"\n      setMessageError(true)\n    }\n  }\n\n  const checkEmail = (email = emailValue) => {\n    if (emailIsValid(email)) {\n      emailError.current.innerText = \"\"\n      setEmailError(false)\n    } else {\n      emailError.current.innerText = \"Please enter a valid email address\"\n      setEmailError(true)\n    }\n  }\n\n  const checkError = (error) => {\n    if (error === null) {\n      return \"\"\n    } else if (error === true) {\n      return \"has-error\"\n    } else {\n      return \"valid\"\n    }\n  }\n  \n  const emailIsValid = (email) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n  }\n\n  return (\n    <section className=\"section section-email\" id=\"contact\">\n      <form onSubmit={sendEmail} className=\"email-form\">\n        <h1 className={`contact-header ${headerColor}`}>Contact</h1>\n\n        <div className=\"contact-input-container\">\n          <input \n            type=\"text\" \n            name=\"email\" \n            className={`contact-input ${inputColor}`}\n            ref={emailInput} \n            onChange={handleChange}\n            value={emailValue} \n            autoComplete=\"off\"\n          />\n          <label \n            className={`\n              contact-label \n              ${labelColor} \n              ${checkValue(emailValue)}\n              ${checkError(emailErrorState)}\n            `} \n            htmlFor=\"email\" \n            onClick={focusEmail} >\n            Email\n          </label>\n          <div \n            className=\"contact-error\"\n            ref={emailError}\n          ></div>\n        </div>\n\n        <div className=\"contact-input-container\">\n          <input \n            type=\"text\" \n            name=\"message\" \n            className={`contact-input ${inputColor}`}\n            ref={messageInput} \n            onChange={handleChange}\n            value={messageValue} \n            autoComplete=\"off\"\n          />\n          <label \n            className={`\n              contact-label \n              ${labelColor} \n              ${checkValue(messageValue)}\n              ${checkError(messageErrorState)}\n            `} \n            htmlFor=\"message\"\n            onClick={focusMessage} >\n            Message\n          </label>\n          <div \n            className=\"contact-error\"\n            ref={messageError}\n          ></div>\n        </div>\n\n        <div className=\"contact-submit-container\">\n          <input type=\"submit\" className=\"contact-submit\"\n            value=\"Send Message\" />\n        </div>\n      </form>\n    </section>\n  )\n}\n\nconst getStyles = (theme) => {\n\n  if (theme === \"dark\") {\n    return [\"dark-title\", \"dark-contact-input\", \"dark-contact-label\"]\n  } else {\n    return [\"light-title\", \"light-contact-input\", \"light-contact-label\"]\n  }\n\n}\n\nexport default EmailForm"]},"metadata":{},"sourceType":"module"}